Week 2 
Tuesday June 10th 

- Created several python files to start a simple job scheduler system
- created the folder with 5 initial files 
-  started working on starter code for the scheduler file and task

Wed June 11, 2025

- Attended AI + Edge Computing Lecture 
- * Prepared notes for Thursday’s meeting:
-  Initial prototype with `scheduler.py`, `task.py`, `main.py`, and added `node.py` 
-  Planning logging visibility (similar to `kube-scheduler-simulator`) 
- 'Modular scheduler design with plugin-like architecture: filter, score, reserve, bind 
- Researched to implementand improve:
  - Kubernetes plugin scheduler framework
  - YAML-based input simulations (pods/nodes)
  - Event logging best practices

- Practiced Python scheduling logic
-  Explored GitHub repo: [kube-scheduler-simulator](https://github.com/kubernetes-sigs/kube-scheduler-simulator)

- Start problem statement,motivation , and hypothesis for presentation

Thursday June 12, 2025

- **Tasks Completed:

- Met with the writing coach to discuss how to present and explain technical progress more clearly.
- Continued reviewing how to improve the project code based on my research into scheduling simulations and Kubernetes schedulers.
- Met with the team at 3 PM for regular project sync.
- Met with Yongho after the team meeting to review the code I’ve written so far and discuss the next steps.

- Code Progress:

- Began implementing a new Node class (node.py) to simulate compute nodes (rpi, jetson, blade) for more realistic task execution modeling.
- Planning to use this class to:
- Simulate real node states
- Monitor resource usage
- Implement distributed task execution logic
- Reset system state for multiple test runs
- Inject simulated workloads
- *Adjusting the scheduler.py file so that it delegates execution to nodes, not the scheduler directly.

 Friday June 13, 2025 
 - In Progress: from the day before
  - Continuing to explore modular scheduling based on plugin-style patterns inspired byKu bernetes (Filter, Score, Bind phases).
- Preparing to integrate logging and metrics tracking for node performance and task flow.
- Added functionality to:
- Print how many times each task was executed
- Track how many tasks each node handled
- Log which node executed which task

 Meeting
- Met with Yongho for progress check-in.

Code Improvements
- ✅ Fixed initial import/module errors in scheduler setup.
- ✅ Enhanced scheduler system to:
  1. Track how many times each task was executed.
  2. Introduce a `Node` class to simulate compute nodes: `rpi`, `jetson`, and `blade`.
  3. Assign tasks to nodes dynamically — nodes now execute the tasks, not the scheduler.
  4. Log which node executes which task.
  5. Add execution summaries grouped by both task and node.

 Study / Research
- Read GitHub repositories related to **edge resource analysis** to explore real-world scheduler designs.
- Watched tutorials/videos to better understand edge computing task allocation patterns.

Next Steps
- Expand node simulation to include resource capacity and load balancing.
- Look into logging task failures or retries.
- Possibly add threading to simulate parallel execution across nodes.


